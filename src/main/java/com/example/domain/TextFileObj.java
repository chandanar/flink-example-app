/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TextFileObj extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6100158279487334689L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TextFileObj\",\"namespace\":\"com.example.domain\",\"fields\":[{\"name\":\"location_id\",\"type\":\"long\"},{\"name\":\"location_name\",\"type\":\"string\"},{\"name\":\"temperature\",\"type\":\"double\"},{\"name\":\"recordDate\",\"type\":{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TextFileObj> ENCODER =
      new BinaryMessageEncoder<TextFileObj>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TextFileObj> DECODER =
      new BinaryMessageDecoder<TextFileObj>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TextFileObj> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TextFileObj> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TextFileObj> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TextFileObj>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TextFileObj to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TextFileObj from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TextFileObj instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TextFileObj fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long location_id;
   private java.lang.CharSequence location_name;
   private double temperature;
   private java.time.Instant recordDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TextFileObj() {}

  /**
   * All-args constructor.
   * @param location_id The new value for location_id
   * @param location_name The new value for location_name
   * @param temperature The new value for temperature
   * @param recordDate The new value for recordDate
   */
  public TextFileObj(java.lang.Long location_id, java.lang.CharSequence location_name, java.lang.Double temperature, java.time.Instant recordDate) {
    this.location_id = location_id;
    this.location_name = location_name;
    this.temperature = temperature;
    this.recordDate = recordDate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return location_id;
    case 1: return location_name;
    case 2: return temperature;
    case 3: return recordDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: location_id = (java.lang.Long)value$; break;
    case 1: location_name = (java.lang.CharSequence)value$; break;
    case 2: temperature = (java.lang.Double)value$; break;
    case 3: recordDate = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'location_id' field.
   * @return The value of the 'location_id' field.
   */
  public long getLocationId() {
    return location_id;
  }


  /**
   * Sets the value of the 'location_id' field.
   * @param value the value to set.
   */
  public void setLocationId(long value) {
    this.location_id = value;
  }

  /**
   * Gets the value of the 'location_name' field.
   * @return The value of the 'location_name' field.
   */
  public java.lang.CharSequence getLocationName() {
    return location_name;
  }


  /**
   * Sets the value of the 'location_name' field.
   * @param value the value to set.
   */
  public void setLocationName(java.lang.CharSequence value) {
    this.location_name = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public double getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'recordDate' field.
   * @return The value of the 'recordDate' field.
   */
  public java.time.Instant getRecordDate() {
    return recordDate;
  }


  /**
   * Sets the value of the 'recordDate' field.
   * @param value the value to set.
   */
  public void setRecordDate(java.time.Instant value) {
    this.recordDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new TextFileObj RecordBuilder.
   * @return A new TextFileObj RecordBuilder
   */
  public static com.example.domain.TextFileObj.Builder newBuilder() {
    return new com.example.domain.TextFileObj.Builder();
  }

  /**
   * Creates a new TextFileObj RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TextFileObj RecordBuilder
   */
  public static com.example.domain.TextFileObj.Builder newBuilder(com.example.domain.TextFileObj.Builder other) {
    if (other == null) {
      return new com.example.domain.TextFileObj.Builder();
    } else {
      return new com.example.domain.TextFileObj.Builder(other);
    }
  }

  /**
   * Creates a new TextFileObj RecordBuilder by copying an existing TextFileObj instance.
   * @param other The existing instance to copy.
   * @return A new TextFileObj RecordBuilder
   */
  public static com.example.domain.TextFileObj.Builder newBuilder(com.example.domain.TextFileObj other) {
    if (other == null) {
      return new com.example.domain.TextFileObj.Builder();
    } else {
      return new com.example.domain.TextFileObj.Builder(other);
    }
  }

  /**
   * RecordBuilder for TextFileObj instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TextFileObj>
    implements org.apache.avro.data.RecordBuilder<TextFileObj> {

    private long location_id;
    private java.lang.CharSequence location_name;
    private double temperature;
    private java.time.Instant recordDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.domain.TextFileObj.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.location_id)) {
        this.location_id = data().deepCopy(fields()[0].schema(), other.location_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.location_name)) {
        this.location_name = data().deepCopy(fields()[1].schema(), other.location_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.recordDate)) {
        this.recordDate = data().deepCopy(fields()[3].schema(), other.recordDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TextFileObj instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.domain.TextFileObj other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.location_id)) {
        this.location_id = data().deepCopy(fields()[0].schema(), other.location_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.location_name)) {
        this.location_name = data().deepCopy(fields()[1].schema(), other.location_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recordDate)) {
        this.recordDate = data().deepCopy(fields()[3].schema(), other.recordDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'location_id' field.
      * @return The value.
      */
    public long getLocationId() {
      return location_id;
    }


    /**
      * Sets the value of the 'location_id' field.
      * @param value The value of 'location_id'.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder setLocationId(long value) {
      validate(fields()[0], value);
      this.location_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'location_id' field has been set.
      * @return True if the 'location_id' field has been set, false otherwise.
      */
    public boolean hasLocationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'location_id' field.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder clearLocationId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'location_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocationName() {
      return location_name;
    }


    /**
      * Sets the value of the 'location_name' field.
      * @param value The value of 'location_name'.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder setLocationName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.location_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'location_name' field has been set.
      * @return True if the 'location_name' field has been set, false otherwise.
      */
    public boolean hasLocationName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'location_name' field.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder clearLocationName() {
      location_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public double getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder setTemperature(double value) {
      validate(fields()[2], value);
      this.temperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder clearTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordDate' field.
      * @return The value.
      */
    public java.time.Instant getRecordDate() {
      return recordDate;
    }


    /**
      * Sets the value of the 'recordDate' field.
      * @param value The value of 'recordDate'.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder setRecordDate(java.time.Instant value) {
      validate(fields()[3], value);
      this.recordDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'recordDate' field has been set.
      * @return True if the 'recordDate' field has been set, false otherwise.
      */
    public boolean hasRecordDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'recordDate' field.
      * @return This builder.
      */
    public com.example.domain.TextFileObj.Builder clearRecordDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TextFileObj build() {
      try {
        TextFileObj record = new TextFileObj();
        record.location_id = fieldSetFlags()[0] ? this.location_id : (java.lang.Long) defaultValue(fields()[0]);
        record.location_name = fieldSetFlags()[1] ? this.location_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.temperature = fieldSetFlags()[2] ? this.temperature : (java.lang.Double) defaultValue(fields()[2]);
        record.recordDate = fieldSetFlags()[3] ? this.recordDate : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TextFileObj>
    WRITER$ = (org.apache.avro.io.DatumWriter<TextFileObj>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TextFileObj>
    READER$ = (org.apache.avro.io.DatumReader<TextFileObj>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










